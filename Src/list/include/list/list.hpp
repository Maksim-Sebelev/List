#ifndef __LIST_HPP__
#define __LIST_HPP__

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "lib/lib.hpp"

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

using list_elem_t = int;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct WayToErr
{
    CodePlace now_place     ;
    WayToErr* previous_place; // nullptr  when it's place when error is made here or no error
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct ErrorInfo
{
    size_t bad_index;
    const char* function;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class ListStatus
{
    OK,
    WARN,
    ERR,
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class ListErrorType
{
    NO_ERR = 0,
    FAILED_ALLOCATE_MEMORY_IN_CTOR,
    TRY_TO_DTOR_NULLPTR_DATA,
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class ListWarningType
{
    NO_WARN = 0,
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

union ListStatusValue
{
    ListErrorType   err ;
    ListWarningType warn;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct ListElem
{
    list_elem_t value;
    size_t      next ;
    size_t      prev ;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct List_t
{
    ListElem*  data;
    size_t     capacity;
    size_t     size;
    size_t     free;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct ListError_t
{
    ListStatus      status  ;
    ListStatusValue value   ;
    WayToErr*       err_way ;
    ErrorInfo       err_info;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ListError_t ListCtor         (List_t* List, size_t Capacity);
ListError_t ListDtor         (List_t* List);
ListError_t InsertAfter      (List_t* List, const size_t RefElem, const list_elem_t InsertElem, size_t* InsertPlace);
ListError_t InsertBefore     (List_t* List, const size_t RefElem, const list_elem_t InsertElem, size_t* InsertPlace);
ListError_t PushBack         (List_t* List, const list_elem_t PushElem,   size_t* PushPlace);
ListError_t PushFront        (List_t* List, const list_elem_t PushElem, size_t* PushPlace);
ListError_t Erase            (List_t* List, const size_t EraseElemPlace, list_elem_t* EraseELem);
ListError_t PopBack          (List_t* List, list_elem_t* PopElem);
ListError_t PopFront         (List_t* List, list_elem_t* PopElem);
void        PrintList        (const List_t* List);
size_t      GetHead          (const List_t* List);
size_t      GetTail          (const List_t* List);

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ListErrorType Verif            (List_t* List, ListErrorType* Err, const char* File, const int Line, const char* Func);
void          ListAssertPrint  (ListErrorType* Err, const char* File, const int Line, const char* Func);

void          GraphicDump      (const List_t* List, const char* File, const int Line, const char* Func);
void          ConsoleDump      (const List_t* List, const char* File, int Line, const char* Func);

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#endif // __LIST_HPP__
